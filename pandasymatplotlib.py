# -*- coding: utf-8 -*-
"""Copia de PandasYMatplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QKqd8dtr2zCY-450_7y2_72RE3NWByk-

# Modulo pandas
"""

# Importamos pandas como pd
import pandas as pd
# creamos nuestro dataframe al cargar un archivo .csv (valores separados por comas)
df = pd.read_csv('https://raw.githubusercontent.com/davequinta/AI_TechTest/main/Pokemon.csv', index_col=0)

# mostramos los primeros valores del dataframe
df.head(10)

# mostramos los ultimos valores del dataframe
df.tail()

# mostramos los primeros 10 valores del dataframe
df.head(10)

# cargamos los nombres de las columnas del dataframe
nombre_columnas = df.columns
# convertimos el resultado a una lista para poder manipularlo como lista si lo deseamos
print(list(nombre_columnas))

# cargamos todos los valores de la columna "Name" a nuestra variable y la convertimos en una lista
Nombres_pokemon = df['Name'].values.tolist()
# mostramos los primeros 20 nombres de la columna Name que ahora esta en una lista
print(Nombres_pokemon[:20])

"""# Manipulacion del dataframe"""

'''Vamos a manipular el dataframe, para eso empezamos con los nombres de las columnas'''
# Cambiamos los nombres de las columnas para que todo este en minusculas, para eso primero convertimos a string usando str
df.columns = df.columns.str.lower()
# mostramos el nombre de las columnas, ahora todas estan en minuscula
print(df.columns)
# Reemplazamos los espacios, en este caso los quitamos
df.columns = df.columns.str.replace(' ','')
print(df.columns)
# ahora se reemplaza el punto por guion bajo
df.columns = df.columns.str.replace('.','_')
print(df.columns)
# estos son ejemplos de manipulacion de un dataframe, dependiendo de la calidad de la data y su uso
# es posible que no se necesite hacer muchos cambios o al contrario y si se necesite cambiar los nombres

# En la columna de nombres, se encuentran nombres con un formato incorrecto, por lo tanto se procede a reemplazar
# Se modifica el dataframe df, y se selecciona la columna 'name'
df['name'] = df['name'].str.replace(".*(?=Mega)", "")
# podemos ver que ya no dice VenusaurMega Venusaur y ahora solo dice Mega Venusaur
df.head(20)

# Ya que los indices de las filas a veces se repiten, en este caso preferimos utilizar la columna 'name' como indice
df = df.set_index("name")
df.head(20)

# al ver el dataframe vemos que hay valores NaN, estos son campos sin data o vacios, vamos a verificar en todo
# el dataframe los valores vacios que encontremos
df.isnull().any()

"""Vemos que la unica columna que tiene datos vacios es type2"""

# Contamos la cantidad de datos NaN que existen en el dataframe, para eso utilizamos isna() y luego sum()
df.isna().sum()

"""Vemos que en la columna type2 hay 386 datos vacios, podemos rellenar esos datos o simplemente obviar la columna."""

# En este caso vamos a eliminar la columna de type2 ya que posee una gran cantidad de valores vacios
# y no los consideramos importantes
# Utilizamos drop() se le pasa inplace=True para que no retorne una copia, ya que queremos que lo borre de
# nuestro dataframe, axis es para eliminar por fila y 1 por columna, en este caso por eso especificamos el nombre de la columna
df.drop('type2', inplace=True, axis=1)

df.head(10)

# ahora haces una cuenta de los valores que existen en la columna type1
# value_counts() nos retorna cuantos valores hay de cada tipo
df["type1"].value_counts()

# podemos ver mas informacion sobre nuestro dataset si utilizamos describe()
# los datos que se muestran dependen del dataset en nuestro dataframe
df.describe()

"""Podemos ver valores minimos, maximos, la media, cantidad de datos, etc.

# Matplotlib.pyplot
"""

# importamos matplotlib y de esta utilizamos pyplot como plt
import matplotlib.pyplot as plt
# podemos empezar a generar una grafica solo pasandole unos valores al comando plot
plt.plot([1,2,3,4])
# cuando solo se pasa una lista o array, plot asume que son valores en el eje Y y el asigna los
# valores del eje X.
# le damos un nombre al eje Y
plt.ylabel('eje Y')
# mostramos la grafica
plt.show()

# ahora le pasamos dos listas a plot, donde la primera es el eje X y la segunda es el eje Y
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])

# podemos definir un estilo y color para nuestra grafica, se utilizan los mismos que MATLAB
# podemos ver que el tercer valor 'ro' significa puntos rojos
plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro')
# definimos los rangos de los ejes, 0 a 6 el eje X y 0 a 20 el eje Y
plt.axis([0, 6, 0, 20])

plt.show()

# podemos tener varios graficos en la misma ventana y a cada uno asignarle distintos estilos
# creamos un array de 0 a 5 en intervalos de 0.2
t = np.arange(0., 5., 0.2)
# graficamos con lineas rojas t vs t, t vs t cuadrado en azul y t vs t cubo en verde
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
plt.show()

# podemos hacer graficos de barra utilizando plt.bar
# creamos una figura que es donde se mostrara el grafico y le indicamos el tama√±o
plt.figure(figsize=(15,10))
# creamos nuestro grafico, utilizando como eje X todos los valores unicos del dataframe en la columna type1
# y en el eje Y le pasamos la cantidad de entradas que hay de cada tipo
plt.bar(df['type1'].unique(), df['type1'].value_counts())
# asignamos un nombre al eje x
plt.xlabel('Tipos')
# nombre del eje y
plt.ylabel('Total')
# titulo de la grafica
plt.title('Distribucion de tipos')
# mostramos la grafica
plt.show()

