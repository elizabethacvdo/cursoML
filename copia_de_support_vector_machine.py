# -*- coding: utf-8 -*-
"""Copia de Support Vector Machine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10JWRxCEkemCfP_u_PrJllqe6g3hajBDw

# Support Vector Machine (SVM)

## Importar Librerias
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importar el dataset o conjunto de datos"""

dataset = pd.read_csv('Social_Network_Ads.csv')
dataset.head()

"""##Crear las variables independiente y dependiente"""

x = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""## División del dataset en conjunto de entrenamiento y conjunto de prueba"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

"""##Aplicamos normalización de datos"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

"""## Entrenamiento del modelo de SVM con el conjunto de entrenamiento

"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(x_train, y_train)

"""## Predecir un nuevo resultado"""

print(classifier.predict(sc.transform([[30,87000]])))

"""## Predicción de los resultados del conjunto de prueba"""

y_pred = classifier.predict(x_test)
print(y_pred)

print(y_test)

"""## Comprobando exactitud"""

from sklearn.metrics import accuracy_score

accuracy_score(y_test, y_pred)

"""## Visualización de los resultados del conjunto de entrenamiento"""

from matplotlib.colors import ListedColormap
x_set, y_set = sc.inverse_transform(x_train), y_train
x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 10, stop = x_set[:, 0].max() + 10, step = 0.25),
                     np.arange(start = x_set[:, 1].min() - 1000, stop = x_set[:, 1].max() + 1000, step = 0.25))
plt.contourf(x1, x2, classifier.predict(sc.transform(np.array([x1.ravel(), x2.ravel()]).T)).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(x1.min(), x1.max())
plt.ylim(x2.min(), x2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('SVM (Conjunto de entrenamiento)')
plt.xlabel('Edad')
plt.ylabel('Salario Estimado')
plt.legend()
plt.show()

"""## Visualización de los resultados del conjunto de prueba"""

from matplotlib.colors import ListedColormap
x_set, y_set = sc.inverse_transform(x_test), y_test
x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 10, stop = x_set[:, 0].max() + 10, step = 0.25),
                     np.arange(start = x_set[:, 1].min() - 1000, stop = x_set[:, 1].max() + 1000, step = 0.25))
plt.contourf(x1, x2, classifier.predict(sc.transform(np.array([x1.ravel(), x2.ravel()]).T)).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(x1.min(), x1.max())
plt.ylim(x2.min(), x2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('SVM (Conjunto de prueba)')
plt.xlabel('Edad')
plt.ylabel('Salario Estimado')
plt.legend()
plt.show()